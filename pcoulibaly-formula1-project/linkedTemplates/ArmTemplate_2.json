{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "pcoulibaly-formula1-project"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_KenftsReqFunding_dfTarget')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_injectionsa",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "target",
						"container": "datakind"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "countryCode",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "code",
						"type": "String"
					},
					{
						"name": "startDate",
						"type": "String"
					},
					{
						"name": "endDate",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "clusterCode",
						"type": "String"
					},
					{
						"name": "cluster",
						"type": "String"
					},
					{
						"name": "requirements",
						"type": "String"
					},
					{
						"name": "funding",
						"type": "String"
					},
					{
						"name": "percentFunded",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SomHealthFacilitiesSrc')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_humData",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Somalia"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "HFs Data",
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "9fd710d4-ab87-43c9-b6da-39847af345b1/resource/3bc1cf5a-a46d-47a5-8f7f-93789f5db5b9/download/health-facilities.xlsx"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SomHealthFacilitiesTarget')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_injectionsa",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "SomHealthFacilities",
						"folderPath": "target",
						"container": "datakind"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": " Region ",
						"type": "String"
					},
					{
						"name": " District",
						"type": "String"
					},
					{
						"name": "Health Facility name",
						"type": "String"
					},
					{
						"name": "Type:",
						"type": "String"
					},
					{
						"name": "Latiitude",
						"type": "String"
					},
					{
						"name": "Longititude",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SomHealthFacilities_dftarget')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_injectionsa",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "target",
						"container": "datakind"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_formula1_raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_formula1_storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "circuits",
						"folderPath": "pcoulibaly/raw",
						"container": "training"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_targetXLSX_binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_injectionsa",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ds_targetXLSX_binary",
						"folderPath": "target",
						"container": "datakind"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pq_KenftsFundingGlobalCluster')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_injectionsa",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "KenftsFundingGlobalClusterPQ",
						"folderPath": "target",
						"container": "datakind"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_datakinddb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_DataKindPostgreSql",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tableName": {
						"type": "string",
						"defaultValue": "DatakindTable"
					}
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "public",
					"table": "@dataset().tableName"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyNewFilesByLastModifiedDate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new and changed files only by using LastModifiedDate",
				"activities": [
					{
						"name": "CopyNewFiles",
						"description": "Copy new and changed files only by using LastModifiedDate",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@{pipeline().parameters.LastModified_From}",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@{pipeline().parameters.LastModified_To}",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "*",
										"type": "Expression"
									}
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryDataSourceStore",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.FolderPath_Source",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.Directory_Source",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryDataDestinationStore",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.FolderPath_Destination",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.Directory_Destination",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FolderPath_Source": {
						"type": "String",
						"defaultValue": "datakind"
					},
					"Directory_Source": {
						"type": "String",
						"defaultValue": "raw"
					},
					"FolderPath_Destination": {
						"type": "String",
						"defaultValue": "datakind"
					},
					"Directory_Destination": {
						"type": "String",
						"defaultValue": "target"
					},
					"LastModified_From": {
						"type": "String",
						"defaultValue": "2022-02-01T00:00:00Z"
					},
					"LastModified_To": {
						"type": "String",
						"defaultValue": "2022-03-01T00:00:00Z"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_KenFoodInsecuritySrc",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_targetXLSX_binary",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_targetXLSX_binary')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "date",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "admin1",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "admin1",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "admin2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "admin2",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "market",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "market",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "latitude",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "latitude",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "longitude",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "longitude",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "category",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "category",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "commodity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "commodity",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "unit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "unit",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "priceflag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "priceflag",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "pricetype",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "pricetype",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "currency",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "currency",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "price",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "price",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "usdprice",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "usdprice",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_KenfoodPricesSrc",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_KenFoodPrices_target",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_KenHealthFacilitiesExcel",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_HealthFacilities_target",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_KenHealthFacilities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_KenHealthFacilitiesExcel",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_KenHealthFacilitiesTarget",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Kept"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SomHealthFacilities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_SomHealthFacilitiesSrc",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_SomHealthFacilitiesTarget",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Kept"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_SomHealthFacilitiesSrc')]",
				"[concat(variables('factoryId'), '/datasets/ds_SomHealthFacilitiesTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingest_formula1_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Ingest Race File",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "00.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/pcoulibaly@valorem.com/formula1/Ingestion/2.Ingest_race_file"
						},
						"linkedServiceName": {
							"referenceName": "ls_formula1_databricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Folder Details",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "00.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_formula1_raw",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If Folder Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Folder Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get Folder Details').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Ingest Circuits File",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "00.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Users/pcoulibaly@valorem.com/formula1/Ingestion/1.Ingest_circuits_file"
									},
									"linkedServiceName": {
										"referenceName": "ls_formula1_databricks",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"v_data_source": {
						"type": "String",
						"defaultValue": "Ergast"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_formula1_raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HealthFacilitiesJoinedDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_SomHealthFacilitiesTarget",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_KenHealthFacilitiesTarget",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_SomHealthFacilities_dftarget",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "split2"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          { Region } as string,",
						"          { District} as string,",
						"          {Health Facility name} as string,",
						"          {Type:} as string,",
						"          Latiitude as double,",
						"          Longititude as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          Code as short,",
						"          Name as string,",
						"          Registration_number as string,",
						"          {Keph level} as string,",
						"          {Facility type} as string,",
						"          Owner as string,",
						"          {Regulatory body} as string,",
						"          Beds as short,",
						"          Cots as short,",
						"          County as string,",
						"          Constituency as string,",
						"          {Sub county} as string,",
						"          Ward as string,",
						"          {Operation status} as string,",
						"          Open_whole_day as boolean,",
						"          Open_public_holidays as boolean,",
						"          Open_weekends as boolean,",
						"          Open_late_night as boolean,",
						"          Service_names as string,",
						"          Approved as boolean,",
						"          {Public visible} as boolean,",
						"          Closed as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1 split(contains(array(toString(columns())), isNull(#item)),",
						"     disjoint: false) ~> split1@(Nulls, Good)",
						"source2 split(contains(array(toString(columns())), isNull(#item)),",
						"     disjoint: false) ~> split2@(Nulls2, Good2)",
						"split1@Good, split2@Good2 join({Health Facility name} == Name,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['HealthFacilitiesJoined'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_SomHealthFacilitiesTarget')]",
				"[concat(variables('factoryId'), '/datasets/ds_SomHealthFacilities_dftarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KenFoodPrices')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ds_KenFoodPrices_df_target",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ds_KenFoodPrices_df_target",
							"dataset": {
								"referenceName": "ds_KenFoodPrices_df_target",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared ds_KenFoodPrices_df_target = let AdfDoc = AzureStorage.BlobContents(\"https://pcoulibalystorageaccount.blob.core.windows.net/datakind/target/part-00000-8bc485e3-6ad7-4f50-9047-99bfd94b14c2-c000.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared UserQuery = let Source = #\"ds_KenFoodPrices_df_target\",\n  #\"Removed top rows\" = Table.Skip(Source, 1),\n  #\"Added custom\" = Table.Profile(#\"Replaced value\") in #\"Removed top rows\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KenFoodPricesDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "tobecleaned"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_KenFoodPrices_df_target",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_KenFoodPrices_dfsink",
								"type": "DatasetReference"
							},
							"name": "sink2",
							"description": "Export data to ds_KenFoodPrices_dfsink. This is because HTTP won't work with dataflow. So the data sink from pipeline2 is used in the DF for transformation purposes and then sent to the same sink with a different name"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          date as string,",
						"          admin1 as string,",
						"          admin2 as string,",
						"          market as string,",
						"          latitude as string,",
						"          longitude as string,",
						"          category as string,",
						"          commodity as string,",
						"          unit as string,",
						"          priceflag as string,",
						"          pricetype as string,",
						"          currency as string,",
						"          price as string,",
						"          usdprice as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 split(contains(array(toString(columns())), isNull(#item)),",
						"     disjoint: false) ~> split1@(Nulls, Good)",
						"split1@Good sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     filePattern:'KenFoodPricesTarget',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KenHealthFacilities')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "tobecleaned"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_HealthFacilities_target",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_HealthFacilities_dfTarget",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Code as string,",
						"          Name as string,",
						"          Registration_number as string,",
						"          {Keph level} as string,",
						"          {Facility type} as string,",
						"          Owner as string,",
						"          {Regulatory body} as string,",
						"          Beds as string,",
						"          Cots as string,",
						"          County as string,",
						"          Constituency as string,",
						"          {Sub county} as string,",
						"          Ward as string,",
						"          {Operation status} as string,",
						"          Open_whole_day as string,",
						"          Open_public_holidays as string,",
						"          Open_weekends as string,",
						"          Open_late_night as string,",
						"          Service_names as string,",
						"          Approved as string,",
						"          {Public visible} as string,",
						"          Closed as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 filter(iif(isNull(Code),false(),true())) ~> filter1",
						"filter1 derive(Service_Names = iifNull({Service_names}, 'Unknown')) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          each(match(name!='Service_names'))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KenftsFundingClusterDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "tobecleaned"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_KenftsFundingCluster_target",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_KenftsFundingCluster_dfsink",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to KenftsFundingCluster_dfsink"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "alterRow1",
							"description": "delete first row using countryCode as basis"
						}
					],
					"scriptLines": [
						"source(output(",
						"          countryCode as string,",
						"          id as integer,",
						"          name as string,",
						"          code as string,",
						"          startDate as string,",
						"          endDate as string,",
						"          year as string,",
						"          clusterCode as string,",
						"          cluster as string,",
						"          requirements as string,",
						"          funding as string,",
						"          percentFunded as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 filter(iif(isNull(funding),false(),true())) ~> filter1",
						"filter1 filter(iif(isNull(percentFunded),false(),true())) ~> filter2",
						"filter2 alterRow(deleteIf(countryCode=='#country+code')) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		}
	]
}