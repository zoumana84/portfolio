{
	"name": "KenftsFundingGlobalClusterDF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_KenftsFundingGlobalCluster_target",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_KenFoodPrices_target",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "KenftsFundingGlobalCluster_dfsink",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          countryCode as string,",
				"          id as short,",
				"          name as string,",
				"          code as string,",
				"          startDate as date,",
				"          endDate as date,",
				"          year as short,",
				"          clusterCode as short,",
				"          cluster as string,",
				"          requirements as integer,",
				"          funding as integer,",
				"          percentFunded as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          date as string,",
				"          admin1 as string,",
				"          admin2 as string,",
				"          market as string,",
				"          latitude as string,",
				"          longitude as string,",
				"          category as string,",
				"          commodity as string,",
				"          unit as string,",
				"          priceflag as string,",
				"          pricetype as string,",
				"          currency as string,",
				"          price as string,",
				"          usdprice as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"join1 split(contains(array(toString(columns())), isNull(#item)),",
				"     disjoint: false) ~> split1@(Nulls, good)",
				"source1, source2 join(countryCode == admin1,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"split1@good sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          date as string,",
				"          admin1 as string,",
				"          market as string,",
				"          latitude as string,",
				"          longitude as string,",
				"          category as string,",
				"          commodity as string,",
				"          unit as string,",
				"          priceflag as string,",
				"          pricetype as string,",
				"          currency as string,",
				"          price as string,",
				"          usdprice as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}